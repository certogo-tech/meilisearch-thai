# Docker Compose for Thai Tokenizer with Nginx Proxy Manager
# This configuration works with existing Nginx Proxy Manager setup
# NPM should proxy search.cads.arda.or.th to localhost:8000

services:
  # Thai Tokenizer service only (no built-in reverse proxy)
  thai-tokenizer:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.prod
    ports:
      # Expose on port 8000 for Nginx Proxy Manager
      - "${THAI_TOKENIZER_PORT:-8000}:8000"
    environment:
      # External Meilisearch connection configuration
      - MEILISEARCH_HOST=${MEILISEARCH_HOST:-http://localhost:7700}
      - MEILISEARCH_API_KEY=${MEILISEARCH_API_KEY}
      - MEILISEARCH_INDEX=${MEILISEARCH_INDEX:-documents}
      - MEILISEARCH_SSL_VERIFY=${MEILISEARCH_SSL_VERIFY:-false}
      - MEILISEARCH_TIMEOUT_MS=${MEILISEARCH_TIMEOUT_MS:-10000}
      - MEILISEARCH_MAX_RETRIES=${MEILISEARCH_MAX_RETRIES:-3}
      - THAI_TOKENIZER_MEILISEARCH_HOST=${MEILISEARCH_HOST:-http://localhost:7700}
      - THAI_TOKENIZER_MEILISEARCH_API_KEY=${MEILISEARCH_API_KEY}
      - THAI_TOKENIZER_MEILISEARCH_INDEX=${MEILISEARCH_INDEX:-documents}
      - THAI_TOKENIZER_MEILISEARCH_SSL_VERIFY=${MEILISEARCH_SSL_VERIFY:-false}
      - THAI_TOKENIZER_MEILISEARCH_TIMEOUT_MS=${MEILISEARCH_TIMEOUT_MS:-10000}
      - THAI_TOKENIZER_MEILISEARCH_MAX_RETRIES=${MEILISEARCH_MAX_RETRIES:-3}
      
      # Thai tokenizer configuration
      - THAI_TOKENIZER_TOKENIZER_ENGINE=${TOKENIZER_ENGINE:-pythainlp}
      - THAI_TOKENIZER_TOKENIZER_MODEL=${TOKENIZER_MODEL:-}
      - THAI_TOKENIZER_ENABLE_MIXED_LANGUAGE=${ENABLE_MIXED_LANGUAGE:-true}
      
      # Service configuration
      - THAI_TOKENIZER_SERVICE_HOST=${SERVICE_HOST:-0.0.0.0}
      - THAI_TOKENIZER_SERVICE_PORT=8000
      - THAI_TOKENIZER_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - THAI_TOKENIZER_DEBUG=${DEBUG:-false}
      - THAI_TOKENIZER_SERVICE_NAME=${SERVICE_NAME:-thai-tokenizer-prod}
      - THAI_TOKENIZER_VERSION=${VERSION:-1.0.0}
      
      # Performance configuration
      - THAI_TOKENIZER_PROCESSING_BATCH_SIZE=${BATCH_SIZE:-50}
      - THAI_TOKENIZER_MAX_WORKERS=${MAX_WORKERS:-4}
      - THAI_TOKENIZER_REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
      - WORKER_PROCESSES=${WORKER_PROCESSES:-4}
      - TOKENIZER_CACHE_SIZE=${TOKENIZER_CACHE_SIZE:-1000}
      
      # Security configuration (NPM handles HTTPS)
      - THAI_TOKENIZER_CORS_ORIGINS=${CORS_ORIGINS:-*}
      - THAI_TOKENIZER_ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - THAI_TOKENIZER_API_KEY_REQUIRED=${API_KEY_REQUIRED:-false}
      - THAI_TOKENIZER_API_KEY=${THAI_TOKENIZER_API_KEY:-}
      
      # Python optimizations
      - PYTHONOPTIMIZE=1
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app
      
      # PyThaiNLP configuration
      - PYTHAINLP_DATA_PATH=/home/appuser/.pythainlp
      
      # Custom dictionary configuration
      - CUSTOM_DICTIONARY_PATH=${CUSTOM_DICTIONARY_PATH:-}
    
    # Health check
    healthcheck:
      test: |
        curl -f http://localhost:8000/health && \
        curl -f http://localhost:8000/health/detailed | grep -q '"meilisearch_status":"healthy"'
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    
    restart: unless-stopped
    
    # Network configuration - using direct IP connection to Meilisearch
    # No external network needed since we're connecting via IP address
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-2.0}'
          memory: ${MEMORY_LIMIT:-1G}
        reservations:
          cpus: '${CPU_RESERVATION:-0.5}'
          memory: ${MEMORY_RESERVATION:-256M}
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    
    # Volume mounts
    volumes:
      - thai_tokenizer_logs:/var/log/thai-tokenizer
      - pythainlp_data:/home/appuser/.pythainlp
      - ./data/dictionaries:/app/data/dictionaries:ro
    
    # Labels for monitoring
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8000"
      - "prometheus.io/path=/metrics"
      - "service.name=thai-tokenizer"
      - "service.version=1.0.0"
      - "environment=production"
      - "proxy.managed-by=nginx-proxy-manager"

# Volume definitions
volumes:
  thai_tokenizer_logs:
    driver: local
  
  pythainlp_data:
    driver: local
    name: pythainlp_data_${COMPOSE_PROJECT_NAME:-thai_tokenizer_prod}

# Network definitions
# No external networks needed - using direct IP connection to Meilisearch