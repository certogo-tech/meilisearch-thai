# Docker Compose configuration for Thai Tokenizer service
# Designed to connect to an existing external Meilisearch instance
# This configuration does NOT include a Meilisearch service

services:
  thai-tokenizer:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    ports:
      - "${THAI_TOKENIZER_PORT:-8000}:8000"
    environment:
      # External Meilisearch connection configuration
      - THAI_TOKENIZER_MEILISEARCH_HOST=${MEILISEARCH_HOST:-http://localhost:7700}
      - THAI_TOKENIZER_MEILISEARCH_API_KEY=${MEILISEARCH_API_KEY}
      - THAI_TOKENIZER_MEILISEARCH_INDEX=${MEILISEARCH_INDEX:-documents}
      - THAI_TOKENIZER_MEILISEARCH_SSL_VERIFY=${MEILISEARCH_SSL_VERIFY:-true}
      - THAI_TOKENIZER_MEILISEARCH_TIMEOUT_MS=${MEILISEARCH_TIMEOUT_MS:-10000}
      - THAI_TOKENIZER_MEILISEARCH_MAX_RETRIES=${MEILISEARCH_MAX_RETRIES:-3}
      
      # Thai tokenizer configuration
      - THAI_TOKENIZER_TOKENIZER_ENGINE=${TOKENIZER_ENGINE:-pythainlp}
      - THAI_TOKENIZER_TOKENIZER_MODEL=${TOKENIZER_MODEL:-}
      - THAI_TOKENIZER_ENABLE_MIXED_LANGUAGE=${ENABLE_MIXED_LANGUAGE:-true}
      
      # Service configuration
      - THAI_TOKENIZER_SERVICE_HOST=${SERVICE_HOST:-0.0.0.0}
      - THAI_TOKENIZER_SERVICE_PORT=8000
      - THAI_TOKENIZER_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - THAI_TOKENIZER_DEBUG=${DEBUG:-false}
      - THAI_TOKENIZER_SERVICE_NAME=${SERVICE_NAME:-thai-tokenizer}
      - THAI_TOKENIZER_VERSION=${VERSION:-1.0.0}
      
      # Performance configuration
      - THAI_TOKENIZER_PROCESSING_BATCH_SIZE=${BATCH_SIZE:-50}
      - THAI_TOKENIZER_MAX_WORKERS=${MAX_WORKERS:-4}
      - THAI_TOKENIZER_REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
      - WORKER_PROCESSES=${WORKER_PROCESSES:-4}
      - TOKENIZER_CACHE_SIZE=${TOKENIZER_CACHE_SIZE:-1000}
      
      # Security configuration
      - THAI_TOKENIZER_CORS_ORIGINS=${CORS_ORIGINS:-*}
      - THAI_TOKENIZER_ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - THAI_TOKENIZER_API_KEY_REQUIRED=${API_KEY_REQUIRED:-false}
      - THAI_TOKENIZER_API_KEY=${THAI_TOKENIZER_API_KEY:-}
      
      # Python optimizations
      - PYTHONOPTIMIZE=1
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app
      
      # PyThaiNLP configuration
      - PYTHAINLP_DATA_PATH=/home/appuser/.pythainlp
    
    # Health check with external Meilisearch validation
    healthcheck:
      test: |
        curl -f http://localhost:8000/health && \
        curl -f http://localhost:8000/health/detailed | grep -q '"meilisearch_status":"healthy"'
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    
    restart: unless-stopped
    
    # Network configuration for external Meilisearch access
    networks:
      - thai-tokenizer-network
      - external-meilisearch-network
    
    # Resource limits optimized for Thai tokenization
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-2.0}'
          memory: ${MEMORY_LIMIT:-1G}
        reservations:
          cpus: '${CPU_RESERVATION:-0.5}'
          memory: ${MEMORY_RESERVATION:-256M}
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
    
    # Volume mounts for logs and data persistence
    volumes:
      - thai_tokenizer_logs:/var/log/thai-tokenizer
      - pythainlp_data:/home/appuser/.pythainlp
    
    # Labels for service discovery and monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.thai-tokenizer.rule=Host(`${THAI_TOKENIZER_DOMAIN:-localhost}`)"
      - "traefik.http.services.thai-tokenizer.loadbalancer.server.port=8000"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8000"
      - "prometheus.io/path=/metrics"

  # Optional: Nginx reverse proxy for production deployments
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.external-meilisearch.conf:/etc/nginx/nginx.conf:ro
      - ../../ssl:/etc/nginx/ssl:ro
      - ../../logs/nginx:/var/log/nginx
    depends_on:
      thai-tokenizer:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - thai-tokenizer-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    profiles:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`${NGINX_DOMAIN:-localhost}`)"

# Volume definitions
volumes:
  thai_tokenizer_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOG_DIR:-../../logs/thai-tokenizer}
  
  pythainlp_data:
    driver: local
    name: pythainlp_data_${COMPOSE_PROJECT_NAME:-thai_tokenizer}

# Network definitions
networks:
  # Internal network for service communication
  thai-tokenizer-network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-thai_tokenizer}_internal
    ipam:
      config:
        - subnet: ${INTERNAL_SUBNET:-172.21.0.0/16}
  
  # External network for connecting to existing Meilisearch
  # This can be an existing network or bridge to host network
  external-meilisearch-network:
    external: true
    name: ${EXTERNAL_MEILISEARCH_NETWORK:-bridge}

# Configuration for different deployment scenarios
x-common-variables: &common-variables
  # External Meilisearch connection
  MEILISEARCH_HOST: ${MEILISEARCH_HOST:-http://host.docker.internal:7700}
  MEILISEARCH_API_KEY: ${MEILISEARCH_API_KEY}
  MEILISEARCH_INDEX: ${MEILISEARCH_INDEX:-documents}
  
  # Service configuration
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  DEBUG: ${DEBUG:-false}
  
  # Performance tuning
  BATCH_SIZE: ${BATCH_SIZE:-50}
  MAX_WORKERS: ${MAX_WORKERS:-4}
  WORKER_PROCESSES: ${WORKER_PROCESSES:-4}