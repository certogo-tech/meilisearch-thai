[project]
name = "thai-tokenizer-meilisearch"
version = "1.0.0"
description = "Custom Thai tokenizer for MeiliSearch to handle compound words"
authors = [
    {name = "Thai Tokenizer Team"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["thai", "tokenizer", "meilisearch", "nlp", "search"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi>=0.116.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.11.0",
    "pydantic-settings>=2.6.0",
    "pythainlp>=5.1.2",
    "meilisearch>=0.31.0",
    "httpx>=0.27.0",
    "python-multipart>=0.0.12",
    "watchdog>=3.0.0",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/thai-tokenizer/thai-tokenizer-meilisearch"
Documentation = "https://github.com/thai-tokenizer/thai-tokenizer-meilisearch/tree/main/docs"
Repository = "https://github.com/thai-tokenizer/thai-tokenizer-meilisearch"
Issues = "https://github.com/thai-tokenizer/thai-tokenizer-meilisearch/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.0",
    "mypy>=1.7.0",
    "types-requests>=2.32.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py312"
line-length = 88
src = ["src"]
exclude = [
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
    "htmlcov",
    "logs",
    "data/samples",
    "deployment/docker/volumes",
    "monitoring/grafana/data",
    "monitoring/prometheus/data",
]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
mypy_path = "src"
packages = ["src"]
exclude = [
    "build/",
    "dist/",
    "htmlcov/",
    "logs/",
    "data/samples/",
    "deployment/",
    "monitoring/",
]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pythainlp.*",
    "meilisearch.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = [
    "tests/unit",
    "tests/integration", 
    "tests/performance",
    "tests/production"
]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "production: Production validation tests",
    "slow: Slow running tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"