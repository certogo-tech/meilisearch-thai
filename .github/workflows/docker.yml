name: Docker

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'deployment/docker/**'
      - 'requirements.txt'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'deployment/docker/**'
      - 'requirements.txt'
      - 'pyproject.toml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    strategy:
      matrix:
        dockerfile: 
          - deployment/docker/Dockerfile
          - deployment/docker/Dockerfile.prod

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
        flavor: |
          suffix=-${{ matrix.dockerfile == 'deployment/docker/Dockerfile.prod' && 'prod' || 'dev' }}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Test Docker image
      run: |
        # Get the first tag from the metadata
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        
        # Start the container
        docker run -d --name test-container \
          -p 8000:8000 \
          -e MEILI_HOST=http://host.docker.internal:7700 \
          -e MEILI_MASTER_KEY=test-key \
          "$IMAGE_TAG"
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test tokenization endpoint
        curl -f -X POST http://localhost:8000/v1/tokenize \
          -H "Content-Type: application/json" \
          -d '{"text": "สวัสดีครับ", "engine": "pythainlp"}' || exit 1
        
        # Stop container
        docker stop test-container
        docker rm test-container

  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    services:
      meilisearch:
        image: getmeili/meilisearch:v1.15.2
        env:
          MEILI_MASTER_KEY: test-master-key
          MEILI_ENV: development
        ports:
          - 7700:7700
        options: >-
          --health-cmd "curl -f http://localhost:7700/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Install dependencies
      run: |
        uv venv
        uv pip install -r requirements.txt
        uv pip install -e .

    - name: Run integration tests with Docker
      run: |
        # Start the application container
        docker run -d --name thai-tokenizer \
          --network host \
          -e MEILI_HOST=http://localhost:7700 \
          -e MEILI_MASTER_KEY=test-master-key \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-dev
        
        # Wait for container to be ready
        sleep 15
        
        # Run integration tests
        uv run pytest tests/integration/ -v \
          --tb=short
      env:
        THAI_TOKENIZER_URL: http://localhost:8000
        MEILI_HOST: http://localhost:7700
        MEILI_MASTER_KEY: test-master-key

    - name: Cleanup
      if: always()
      run: |
        docker stop thai-tokenizer || true
        docker rm thai-tokenizer || true